{"/home/travis/build/npmtest/node-npmtest-crawl/test.js":"/* istanbul instrument in package npmtest_crawl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-crawl/lib.npmtest_crawl.js":"/* istanbul instrument in package npmtest_crawl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_crawl = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_crawl = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-crawl/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-crawl && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_crawl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_crawl\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_crawl.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_crawl.rollup.js'] =\n            local.assetsDict['/assets.npmtest_crawl.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_crawl.__dirname + '/lib.npmtest_crawl.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-crawl/node_modules/crawl/index.js":"/*!\n * Crawl\n * Copyright(c) 2012 Mike Moulton <mike@meltmedia.com>\n * MIT Licensed\n */\n\n module.exports = require('./lib/index');","/home/travis/build/npmtest/node-npmtest-crawl/node_modules/crawl/lib/index.js":"/*!\n * Crawl - index\n * Copyright(c) 2012 Mike Moulton <mike@meltmedia.com>\n * MIT Licensed\n */\n\nvar crawler = require(\"./crawler\"),\n\tdifferencer = require(\"./differencer\");\n\nexports.crawl = crawler.crawl;\nexports.diff = differencer.diff;\n","/home/travis/build/npmtest/node-npmtest-crawl/node_modules/crawl/lib/crawler.js":"/*!\n * Crawl - crawler\n * Copyright(c) 2012 Mike Moulton <mike@meltmedia.com>\n * MIT Licensed\n */\n\nvar events = require(\"events\"),\n    Crawler = require('simplecrawler').Crawler,\n    hash = require('node_hash'),\n    _ = require('underscore'),\n    fs = require(\"fs\"),\n    util = require(\"util\"),\n    urlUtil = require('url');\n\nvar crawler = new events.EventEmitter();\n\n/**\n * crawler.crawl\n *\n * Crawls a website, starting at `url`, finding all linked pages within the same domain.\n * The `url` can also be a filesystem path containing a stringified JSON object of a past crawl. This\n * can be generated using the included CLI and the '--json' option.\n *\n * This function also supports several `options`:\n *   - headers {Boolean}: include the raw http headers from the response in the results\n *   - body {Boolean}: include the http response body in results\n *\n * This function is asyncronous and requires a `callback` with the following signature:\n *   - function(err, pages)\n * where `pages` is an array with the following object structure for each result:\n *   {\n *     url: URL Object provided from Node URL parser,\n *     status: HTTP status code,\n *     contentType: the MIME type for the resource,\n *     checksum: SHA 256 hash of the response body,\n *     links: Array of links found on this page,\n *     referrers: Array of URLs within the crawled site who referr to this page,\n *     body: The response body (optional),\n *     headers: The response headers (optional),\n *     date: Timestamp of the page crawl\n *   }\n *\n * @param {String} http(s) url of site to crawl, or filesystem path to JSON file to import\n * @param {Object} options (optional)\n * @param {Function} callback -- function(err, pages)\n * @api public\n */\ncrawler.crawl = function(url, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  // setup some default options for the node.io job\n  options['crawler'] = crawler;\n\n\tvar pages = {},\n      potentialPages = {},\n      urlParts = urlUtil.parse(url, true);\n\n  // do a web crawl of url if it's an http protocol\n\tif (urlParts.protocol == \"https:\" || urlParts.protocol == \"http:\") {\n\n    var port = urlParts.port ? urlParts.port : 80,\n        siteCrawler = new Crawler(urlParts.hostname, urlParts.path, port);\n\n    // configure crawler\n    siteCrawler.interval = 10;\n    siteCrawler.maxConcurrency = 10;\n    siteCrawler.scanSubdomains = true;\n    siteCrawler.downloadUnsupported = false;\n\n    if (options.username && options.password) {\n      siteCrawler.needsAuth = true;\n      siteCrawler.authUser = options.username;\n      siteCrawler.authPass = options.password;\n    }\n\n    function mimeTypeSupported(MIMEType) {\n      var supported = false;\n      siteCrawler.supportedMimeTypes.forEach(function(mimeCheck) {\n        if (!!mimeCheck.exec(MIMEType)) {\n          supported = true;\n        }\n      });\n      return supported;\n    }\n\n    var pageHandler = function(queueItem, responseBuffer, response) {\n      if (mimeTypeSupported(queueItem.stateData.contentType)) {\n        crawler.emit(\"crawl\", queueItem.url);\n\n        var data = responseBuffer.toString(),\n            parsedUrl = urlUtil.parse(queueItem.url, true),\n            page = {};\n\n        page.url = queueItem.url;\n        page.status = queueItem.stateData.code;\n        page.contentType = queueItem.stateData.contentType;\n        page.checksum = hash.sha256(data);\n        page.date = new Date().toJSON();\n\n        if (options.headers) page.headers = queueItem.stateData.headers;\n        if (options.body) page.body = data;\n\n        if (potentialPages[parsedUrl.path]) {\n          page = _.extend(page, potentialPages[parsedUrl.path]);\n        }\n\n        pages[parsedUrl.path] = page;\n      }\n    };\n\n    siteCrawler.on(\"discoverycomplete\", function(queueItem, resources) {\n      var parsedUrl = urlUtil.parse(queueItem.url, true);\n\n      // Save the outbound links for the item that just completed discovery\n      pages[parsedUrl.path].links = resources;\n\n      // Update each linked to page storing us as a referrer\n      resources.forEach(function(link) {\n        // A normalized, resolved URL, used for uniq identification purposes\n        var resourceUrl = urlUtil.parse(urlUtil.resolve(parsedUrl, urlUtil.parse(link, true)), true);\n\n        // Links found in the discovery of this resource may not have been crawled yet.\n        // In the case of links that have not yet been crawled, we save them as potential\n        // pages that may meet the crawling criteria (content-type,etc).\n        if (!pages[resourceUrl.path]) {\n          if (!potentialPages[resourceUrl.path]) potentialPages[resourceUrl.path] = { referrers: [] };\n          potentialPages[resourceUrl.path].referrers.push(queueItem.url);\n\n        // Otherwise the resourece has already been crawled so we can store ourselves as a referrer.\n        } else {\n          if (!pages[resourceUrl.path].referrers) pages[resourceUrl.path].referrers = [];\n          pages[resourceUrl.path].referrers.push(queueItem.url);\n        }\n      });\n    });\n\n    // handle normal pages\n    siteCrawler.on(\"fetchcomplete\", pageHandler);\n\n    // handle broken links\n    siteCrawler.on(\"fetch404\", pageHandler);\n\n    // on completion, parse broken links and report\n    siteCrawler.on(\"complete\", function(queueItem, responseBuffer, response) {\n      callback(null, _.map(pages, function (value, key) {\n        // De-Dup referrers. Note: this could be done much more efficiently if performance\n        // becomes a problem.\n        if (value.referrers) value.referrers = _.uniq(value.referrers);\n        return value;\n      }));\n    });\n\n    siteCrawler.start(); // crawl the site\n\n\t}\n\n  // otherwise we load a json file, assumed to be generated by the CLI using the '--json' option\n  else if (urlParts.path) {\n    var path = urlParts.path;\n    try {\n      if (fs.statSync(path).isFile()) {\n        fs.readFile(path, function(err, data) {\n          if (err) callback(err);\n\n          var pages = JSON.parse(data);\n          callback(null, pages);\n        });\n      }\n    }\n    catch (err) {\n      callback(err);\n    }\n  }\n\n  else {\n    callback(\"Unable to interperate url as path or web address: %s\", url);\n  }\n\n};\n\nmodule.exports = crawler;\n","/home/travis/build/npmtest/node-npmtest-crawl/node_modules/crawl/lib/differencer.js":"/*!\n * Crawl - differencer\n * Copyright(c) 2012 Mike Moulton <mike@meltmedia.com>\n * MIT Licensed\n */\n\nvar crawler = require('./crawler'),\n    events = require('events'),\n    util = require('util'),\n    urlUtil = require('url'),\n    first = require('first');\n\nvar differencer = new events.EventEmitter();\n\n/**\n * differencer.diff\n *\n * Performs a difference check on two websites by crawling two url's, `leftUrl`\n * and `rightUrl`, comparing matching relative paths with one another.\n *\n * This is primarily only useful for determining changes between two versions\n * of the same website. For example, checking the changes between a production\n * site and a staging version.\n *\n * This function also supports several `options`:\n *   - headers {Boolean}: include the raw http headers from the response in the results\n *   - body {Boolean}: include the http response body in results\n *   - patch {Boolean}: generate a patch from the left into the right, representing the differences (todo)\n *\n * This function is asyncronous and requires a `callback` with the following signature:\n *   - function(err, leftPages, rightPages, differences)\n *\n * where `leftPages` and `rightPages` is an array with the following object structure for each result:\n *\n *   {\n *     url: URL Object provided from Node URL parser,\n *     checksum: SHA 256 hash of the response body,\n *     links: Array of links found on this page,\n *     body: The response body (optional),\n *     headers: The response headers (optional),\n *     date: Timestamp of the page crawl\n *   }\n *\n * and where `differences` is an object with the following structure:\n *   {\n *     'the relative conponent of the URL crawled': {\n *       left: {\n *         url: URL Object provided from Node URL parser,\n *         checksum: the SHA 256 checksum of the left page\n *       },\n *       right: {\n *         url: URL Object provided from Node URL parser,\n *         checksum: the SHA 256 checksum of the right page\n *       },\n *       differences: {Boolean} if difference were found,\n *       patch: (optional) a patch representing the differences found\n *     }\n *   }\n *\n * @param {String} http(s) url of the first site to crawl,\n *                 or filesystem path to JSON file to import\n * @param {String} http(s) url of the sedond site to crawl,\n *                 or filesystem path to JSON file to import\n * @param {Object} options (optional)\n * @param {Function} callback -- function(err, leftPages, rightPages, differences)\n * @api public\n */\n differencer.diff = function(leftUrl, rightUrl, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  var leftPages, rightPages;\n\n  first(function() {\n    var that = this;\n    crawler.crawl(leftUrl, options, function(err, pages) {\n      if (err) callback(err);\n\n      leftPages = pages;\n      that();\n    });\n  })\n  .whilst(function() {\n    var that = this;\n    crawler.crawl(rightUrl, options, function(err, pages) {\n      if (err) callback(err);\n\n      rightPages = pages;\n      that();\n    });\n  })\n  .then(function() {\n    // perform diff\n    var differences = {};\n    analyze(leftPages, true, options, differences);\n    analyze(rightPages, false, options, differences);\n    callback(null, leftPages, rightPages, differences);\n  });\n\n}\n\n/**\n * analyze\n *\n * Utility function to analyze the pages and look for differences\n *\n * @param {Object} object representing the first site crawled,\n * @param {Boolean} if the object represents the left side,\n * @param {Object} options (optional)\n * @param {Function} callback -- function(err, leftPages, rightPages, differences)\n * @api private\n */\nvar analyze = function(pages, isLeft, options, differences) {\n  pages.forEach(function(page) {\n    var url = urlUtil.parse(page.url, true);\n    var relative = url.path || '/';\n    var type = (isLeft) ? 'left' : 'right';\n    var inverseType = (isLeft) ? 'right' : 'left';\n\n    if (differences[relative]) {\n      differences[relative][type].url = page.url;\n      differences[relative][type].checksum = page.checksum;\n      differences[relative].differences = (page.checksum == differences[relative][inverseType].checksum) ? false : true;\n      // generate a patch of the left into the right\n      if (options.patch) {\n        // todo\n        var patch = \"\";\n        differences[relative].patch = patch;\n      }\n    } else {\n      differences[relative] = {\n        left: {},\n        right: {},\n        differences: true,\n        patch: null\n      };\n      differences[relative][type] = {\n        url: page.url,\n        checksum: page.checksum\n      };\n    }\n  });\n}\n\nmodule.exports = differencer;\n"}